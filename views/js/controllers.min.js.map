{"version":3,"file":"routes.js","sources":["routes.js","list/index.js","../lib/vis/vis.min!css","../treeRender.js","tree/view.js"],"names":[],"mappings":"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","sourcesContent":["define('taoBackOffice/controller/routes',[],function () {\n    'use strict';\n\n    return {\n        'Lists' : {\n            'actions' : {\n                'index' : 'controller/list/index'\n            }\n        },\n        'Trees': {\n            'actions': {\n                'viewTree': 'controller/tree/view'\n            }\n        }\n    };\n});\n\n","define('taoBackOffice/controller/list/index',['jquery', 'i18n', 'helpers', 'ui/feedback'], function ($, __, helpers, feedback) {\n    'use strict';\n\n    function _addSquareBtn(title, icon, $listToolBar) {\n        var $btn = $('<button>', { 'class': 'btn-info small lft ' +  'icon-'+ icon, title: __(title) });\n        $listToolBar.append($btn);\n        return $btn;\n    }\n\n    return {\n\n        start: function () {\n\n            var saveUrl = helpers._url('saveLists', 'Lists', 'taoBackOffice');\n            var delListUrl = helpers._url('removeList', 'Lists', 'taoBackOffice');\n            var delEltUrl = helpers._url('removeListElement', 'Lists', 'taoBackOffice');\n\n            $(\".list-edit-btn\").click(function () {\n                var $btn = $(this),\n                    uri = $btn.data('uri'),\n                    $listContainer = $(\"#list-data_\" + uri ),\n                // form must be on the inside rather than on the outside as it has been in 2.6\n                    $listForm     = $listContainer.find('form'),\n                    $listTitleBar = $listContainer.find('.container-title h6'),\n                    $listToolBar  = $listContainer.find('.data-container-footer'),\n                    $listSaveBtn,\n                    $listNewBtn;\n\n                if (!$listForm.length) {\n\n                    $listForm = $('<form>');\n                    $listContainer.wrapInner($listForm);\n                    $listContainer.find('form').append('<input type=\"hidden\" name=\"uri\" value=\"' + uri + '\" />');\n\n                    var $labelEdit = $(\"<input type='text' name='label' value=''/>\").val($listTitleBar.text());\n                    $listTitleBar.html($labelEdit);\n\n                    if ($listContainer.find('.list-element').length) {\n                        $listContainer.find('.list-element').replaceWith(function () {\n                            return $(\"<input type='text' name='\" + $(this).attr('id') + \"' value='' />\").val($(this).text());\n                        });\n                    }\n\n                    var elementList = $listContainer.find('ol');\n                    elementList.addClass('sortable-list');\n                    elementList.find('li').prepend('<span class=\"icon-grip\" ></span>');\n                    elementList.find('li').append('<span class=\"icon-checkbox-crossed list-element-delete-btn\" style=\"cursor:pointer;\" ></span>');\n\n                    elementList.sortable({\n                        axis: 'y',\n                        opacity: 0.6,\n                        placeholder: 'ui-state-error',\n                        tolerance: 'pointer',\n                        update: function (event, ui) {\n                            var map = {};\n                            $.each($(this).sortable('toArray'), function (index, id) {\n                                map[id] = 'list-element_' + (index + 1);\n                            });\n                            $(this).find('li').each(function () {\n                                var id = $(this).attr('id');\n                                if (map[id]) {\n                                    $(this).attr('id', map[id]);\n                                    var newName = $(this).find('input').attr('name').replace(id, map[id]);\n                                    $(this).find('input').attr('name', newName);\n                                }\n                            });\n                        }\n                    });\n\n                    $listSaveBtn = _addSquareBtn('Save element', 'save', $listToolBar);\n                    $listSaveBtn.on('click', function () {\n                        $.postJson(\n                            saveUrl,\n                            $(this).closest('form').serializeArray(),\n                            function (response) {\n                                if (response.saved) {\n                                    feedback().success(__('\"list saved\"'));\n                                    helpers._load(helpers.getMainContainerSelector(), helpers._url('index', 'Lists', 'taoBackOffice'));\n                                }else{\n                                    feedback().error(__('List not saved'));\n                                }\n                            }\n                        );\n                        return false;\n                    });\n\n                    $listNewBtn = _addSquareBtn('New element', 'add', $listToolBar);\n                    $listNewBtn.click(function () {\n                        var level = $(this).closest('form').find('ol').children().length + 1;\n                        $(this).closest('form').find('ol').append(\n                            \"<li id='list-element_\" + level + \"'>\" +\n                            \"<span class='icon-grip' ></span>\" +\n                            \"<input type='text' name='list-element_\" + level + \"_' />\" +\n                            \"<span class='icon-add list-element-delete-btn' ></span>\" +\n                            \"</li>\");\n                        return false;\n                    });\n                }\n\n                $(\".list-element-delete-btn\").click(function () {\n                    var $btn = $(this),\n                        uri = $btn.data('uri');\n                    if (confirm(__(\"Please confirm you want to delete this list element.\"))) {\n                        var element = $(this).parent();\n                        uri = element.find('input:text').attr('name').replace(/^list\\-element\\_([1-9]*)\\_/, '');\n                        $.postJson(\n                            delEltUrl,\n                            {uri: uri},\n                            function (response) {\n                                if (response.deleted) {\n                                    element.remove();\n                                    feedback().success(__('Element deleted'));\n                                }else{\n                                    feedback().error(__('Element not deleted'));\n                                }\n                            }\n                        );\n                    }\n                });\n            });\n\n            $('.list-delete-btn').click(function () {\n                if (confirm(__(\"Please confirm you want to delete this list. This operation cannot be undone.\"))) {\n                    var $btn = $(this),\n                        uri = $btn.data('uri'),\n                        $list = $(this).parents(\".data-container\");\n                    $.postJson(\n                        delListUrl,\n                        {uri: uri},\n                        function (response) {\n                            if (response.deleted) {\n                                feedback().success(__('List deleted'));\n                                $list.remove();\n                            }else{\n                                feedback().error(__('List not deleted'));\n                            }\n                        }\n                    );\n                }\n            });\n        }\n    };\n});\n\n","\ndefine('css!taoBackOffice/lib/vis/vis.min',[],function(){});\n","define('taoBackOffice/treeRender',[\n    'jquery',\n    'lodash',\n    'taoBackOffice/lib/vis/vis.min',\n    'css!taoBackOffice/lib/vis/vis.min'\n], function ($, _, vis) {\n    'use strict';\n\n    var network = null;\n    var treeContainer = null;\n    var settings = null;\n    var data = null;\n\n    /**\n     * @private\n     */\n    function destroy() {\n        if (network !== null) {\n            network.destroy();\n            network = null;\n        }\n    }\n\n    var treeRender = {\n\n        /**\n         *\n         * @param {Element} container\n         * @param {Object} [treeData]\n         * @param {Object} [options]\n         */\n        init: function (container, treeData, options) {\n\n            if (!container instanceof Element) {\n                throw new TypeError(\"tree container must be specified\");\n            }\n\n            treeContainer = container;\n            options = options || {};\n            treeData = treeData || {nodes: [], edges: []};\n\n\n            settings = {\n                layout: {\n                    hierarchical: {\n                        sortMethod: 'directed',\n                        \"levelSeparation\": 200\n                    }\n                },\n                nodes: {\n                    shape: 'box',\n                    \"color\": {\n                        \"border\": \"#222\",\n                        \"background\": \"#f2f0ee\",\n\n                        \"highlight\": {\n                            \"border\": \"#222\",\n                            \"background\": \"#f2f0ee\"\n                        }\n                    },\n\n                    \"font\": {\n                        \"face\": \"'Franklin Gothic', 'Franklin Gothic Medium', 'Source Sans Pro', sans-serif\",\n                        \"color\": \"#222\"\n                    }\n\n                },\n                edges: {\n                    smooth: false,\n                    width: 0.2,\n                    color: {\n                        color: \"#222\"\n                    },\n                    arrows: {to: true},\n                    \"physics\": false,\n                    \"scaling\": {\n                        \"label\": false\n                    }\n                }\n            };\n\n            $.extend(settings, options);\n\n            // create a network\n            data = {\n                nodes: treeData.nodes ? treeData.nodes : [],\n                edges: treeData.edges ? treeData.edges : []\n            };\n\n        },\n\n        run: function () {\n            destroy();\n\n            network = new vis.Network(treeContainer, data, settings);\n\n            network.once('initRedraw', function () {\n\n                if (data.nodes.length > 100) {\n                    network.setOptions($.extend(settings, {\n                        physics: {\n                            hierarchicalRepulsion: {\n                                nodeDistance: 200\n                            },\n                            stabilization: {\n                                fit: false\n                            }\n                        }\n                    }));\n\n                    network.fit({\n                        nodes: [data.nodes[0].id, data.nodes[1].id], animation: {\n                            duration: 400,\n                            easingFunction: 'linear'\n                        }\n                    });\n                }\n\n            });\n        }\n    };\n\n    return treeRender;\n});\n","define('taoBackOffice/controller/tree/view',[\n    'layout/actions/binder',\n    'uri',\n    'jquery',\n    'context',\n    'helpers',\n    'taoBackOffice/treeRender'\n], function (binder, uri, $, context, helpers, treeRender) {\n    'use strict';\n\n    /**\n     *\n     * @type {{start: Function}}\n     */\n    var itemRunnerController = {\n\n        //the controller initialization\n        start: function () {\n        \t\n        \t$('.tree-container').each(function(i, obj) {\n        \t\tvar $container = $(obj);\n                var uri = $container.data('id');\n\n                $.post(helpers._url('getTree', 'Trees', 'taoBackOffice'), {uri: uri}, function (treeData) {\n\n                    var $parent = $container.closest('.content-block');\n\n                    var resizeContainer = function () {\n                        $container.height($parent.height() - $parent.find('.panel').eq(0).outerHeight());\n                        $container.width($parent.width());\n                    };\n\n                    $(window).on('resize', resizeContainer);\n\n                    resizeContainer();\n                    treeRender.init($container[0], treeData);\n                    treeRender.run();\n\n                });\n        \t});\n        }\n    };\n\n    // the controller is exposed\n    return itemRunnerController;\n});\n"]}